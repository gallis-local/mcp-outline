name: Docker Image CI - Sync

on:
  push:
    branches:
      - main
    paths:
      - Dockerfile
      - pyproject.toml
      - src/**
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}
    steps:
    - uses: actions/checkout@v5
      name: Checkout Repo Code
      with:
        fetch-depth: 0
        ref: ${{ github.ref }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies
      run: npm install

    - name: Release
      id: release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        npx semantic-release > release-output.txt 2>&1 || true
        cat release-output.txt
        if grep -q "Published release" release-output.txt || [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "released=true" >> $GITHUB_OUTPUT
          # Get the latest tag as version, fallback to current version from pyproject.toml for manual dispatch
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null | sed 's/^v//' || grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Found version: $VERSION"
        else
          echo "released=false" >> $GITHUB_OUTPUT
          echo "No release published"
        fi

  build:
    needs: release
    if: needs.release.outputs.released == 'true'
    runs-on: gallis-gh-runner

    steps:
    - uses: actions/checkout@v5
      name: Checkout Repo Code
      with:
        fetch-depth: 0
        ref: ${{ github.ref }}

    - name: Setup HashiCorp Vault
      uses: hashicorp/vault-action@v3
      with:
        url: ${{ secrets.VAULT_ADDR }}
        method: jwt
        role: github-actions-role
        path: github-actions
        secrets: |
          prod-kubernetes/data/harbor/arm registry-name | HARBOR_NAME ;          
          prod-kubernetes/data/harbor/arm registry-library | HARBOR_LIBRARY ;
          prod-kubernetes/data/harbor/arm github-actions-robot-username | HARBOR_USERNAME ;
          prod-kubernetes/data/harbor/arm github-actions-robot-password | HARBOR_PASSWORD ;
          prod-kubernetes/data/github/slack-webhooks slack-repo-channel | SLACK_WEBHOOK_URL ;

    - name: Export Vault vars as outputs
      id: vault
      shell: bash
      run: |
        set -euo pipefail
        echo "HARBOR_NAME=$HARBOR_NAME" >> "$GITHUB_OUTPUT"
        echo "HARBOR_LIBRARY=$HARBOR_LIBRARY" >> "$GITHUB_OUTPUT"
        echo "HARBOR_USERNAME=$HARBOR_USERNAME" >> "$GITHUB_OUTPUT"
        echo "HARBOR_PASSWORD=$HARBOR_PASSWORD" >> "$GITHUB_OUTPUT"
        echo "SLACK_WEBHOOK_URL=$SLACK_WEBHOOK_URL" >> "$GITHUB_OUTPUT"

    - uses: docker/login-action@v3.5.0
      with:
        registry: https://${{ steps.vault.outputs.HARBOR_NAME }}
        username: ${{ steps.vault.outputs.HARBOR_USERNAME }}
        password: ${{ steps.vault.outputs.HARBOR_PASSWORD }}

    - name: Install QEMU
      run: |
        sudo apt-get update
        sudo apt-get install -y qemu-user-static

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: network=host      

    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ steps.vault.outputs.HARBOR_NAME }}/${{ steps.vault.outputs.HARBOR_LIBRARY }}/mcp-outline:latest
          ${{ steps.vault.outputs.HARBOR_NAME }}/${{ steps.vault.outputs.HARBOR_LIBRARY }}/mcp-outline:v${{ needs.release.outputs.version }}

    - uses: 8398a7/action-slack@v3
      name: Slack Notification
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,author,action,eventName,ref,workflow,job,took # selectable (default: repo,message)
      env:
        SLACK_WEBHOOK_URL: ${{ steps.vault.outputs.SLACK_WEBHOOK_URL }} # required
      if: ${{ always() }} # Pick up events even if the job fails or is canceled.